// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/luan/teapot/models"
)

type FakeRouteProvider struct {
	TiegoRouteStub        func(name string) string
	tiegoRouteMutex       sync.RWMutex
	tiegoRouteArgsForCall []struct {
		name string
	}
	tiegoRouteReturns struct {
		result1 string
	}
	SSHRouteStub        func(name string) string
	sSHRouteMutex       sync.RWMutex
	sSHRouteArgsForCall []struct {
		name string
	}
	sSHRouteReturns struct {
		result1 string
	}
}

func (fake *FakeRouteProvider) TiegoRoute(name string) string {
	fake.tiegoRouteMutex.Lock()
	fake.tiegoRouteArgsForCall = append(fake.tiegoRouteArgsForCall, struct {
		name string
	}{name})
	fake.tiegoRouteMutex.Unlock()
	if fake.TiegoRouteStub != nil {
		return fake.TiegoRouteStub(name)
	} else {
		return fake.tiegoRouteReturns.result1
	}
}

func (fake *FakeRouteProvider) TiegoRouteCallCount() int {
	fake.tiegoRouteMutex.RLock()
	defer fake.tiegoRouteMutex.RUnlock()
	return len(fake.tiegoRouteArgsForCall)
}

func (fake *FakeRouteProvider) TiegoRouteArgsForCall(i int) string {
	fake.tiegoRouteMutex.RLock()
	defer fake.tiegoRouteMutex.RUnlock()
	return fake.tiegoRouteArgsForCall[i].name
}

func (fake *FakeRouteProvider) TiegoRouteReturns(result1 string) {
	fake.TiegoRouteStub = nil
	fake.tiegoRouteReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeRouteProvider) SSHRoute(name string) string {
	fake.sSHRouteMutex.Lock()
	fake.sSHRouteArgsForCall = append(fake.sSHRouteArgsForCall, struct {
		name string
	}{name})
	fake.sSHRouteMutex.Unlock()
	if fake.SSHRouteStub != nil {
		return fake.SSHRouteStub(name)
	} else {
		return fake.sSHRouteReturns.result1
	}
}

func (fake *FakeRouteProvider) SSHRouteCallCount() int {
	fake.sSHRouteMutex.RLock()
	defer fake.sSHRouteMutex.RUnlock()
	return len(fake.sSHRouteArgsForCall)
}

func (fake *FakeRouteProvider) SSHRouteArgsForCall(i int) string {
	fake.sSHRouteMutex.RLock()
	defer fake.sSHRouteMutex.RUnlock()
	return fake.sSHRouteArgsForCall[i].name
}

func (fake *FakeRouteProvider) SSHRouteReturns(result1 string) {
	fake.SSHRouteStub = nil
	fake.sSHRouteReturns = struct {
		result1 string
	}{result1}
}

var _ models.RouteProvider = new(FakeRouteProvider)
